        -:    0:Source:main.c
        -:    0:Graph:main.gcno
        -:    0:Data:main.gcda
        -:    0:Runs:27
        -:    0:Programs:1
        -:    1:#include <stdio.h>
        -:    2:#define N 100
        -:    3:#define OK 1
        -:    4:#define OVERFLOW -1
        -:    5:
       18:    6:void print_mass(int a[], int size) // функция печати массива
        -:    7:{
      126:    8:    for (int i = 0; i < size; i++)
      108:    9:        printf("%d ", a[i]);
       18:   10:    printf("\n");
       18:   11:}
       18:   12:int read_file(FILE *f, int* pb) // запись чисел из файла в массив
        -:   13:{
       18:   14:    int* pcur = pb;
        -:   15:    int num;
      144:   16:    while (fscanf(f, "%d", &num) == 1)
        -:   17:    {
      108:   18:        *pcur = num;
      108:   19:        pcur++;
        -:   20:
        -:   21:
        -:   22:    }
       18:   23:    return OK;
        -:   24:}
        -:   25:
       18:   26:void sort(int *array,int *s_array, int *end) // сортировка для последующего подсчета различных элементов
        -:   27:{
        -:   28:   // printf("array: %d, end: %d ", *array, *end);
        -:   29:    //while (array < end && (*array) > 0)
      144:   30:    while (array < end)
        -:   31:    {
      108:   32:        int *j = s_array; // указатель для второго цикла т.к. первый меняется
        -:   33:        //printf("iteration\n");
        -:   34:        //while (j < end -1 && (*j > 0))
      756:   35:        while (j < end -1)
        -:   36:        {
        -:   37:            //printf("J: %d J+1: %d\n", *j, *(j+1));
      540:   38:            if (*j > *(j+1))
        -:   39:            {
        -:   40:                //printf("swap\n");
       95:   41:                int t = *j;
       95:   42:                *j = *(j+1);
       95:   43:                *(j+1) = t;
        -:   44:
        -:   45:            }
      540:   46:            j++;
        -:   47:        }
      108:   48:        array++;
        -:   49:    }
       18:   50:}
        -:   51:
        -:   52:
        -:   53:
       27:   54:int main(int argc, char **argv)
        -:   55:{
        -:   56:    FILE *f;
        -:   57:    int a[N];
        -:   58:    int read_error; // код ошибки
        -:   59:    int size; // размер массива
        -:   60:    //int count; // количество различных элементов
        -:   61:    //int num; // для проверки на пустоту
        -:   62:    int b;
       27:   63:    printf("input: ");
       27:   64:    scanf("%d",&b);
        -:   65:
        -:   66:
        -:   67:
        -:   68:
        -:   69:
       27:   70:    if (argc != 2) // проверка на наличие аргумента
        -:   71:    {
        1:   72:        fprintf(stderr, "Not enough arguments\n");
        -:   73:    }
        -:   74:    else
        -:   75:    {
       26:   76:        f = fopen(argv[1], "r"); // успешное открытие файла
       26:   77:        if (f == NULL)
        -:   78:        {
        3:   79:            fprintf(stderr, "Could not open file\n");
        -:   80:        }
        -:   81:        else
        -:   82:        {
        -:   83:
        -:   84:
       23:   85:            if (fscanf(f, "%d", &size) == 1) // проверка на пустой файл
        -:   86:            {
       18:   87:                rewind(f);
       18:   88:                read_error = read_file(f,a);
       18:   89:                if (read_error == OK)
        -:   90:                {
       18:   91:                    a[0] = b;
       18:   92:                    sort(a, a, a + size +1);
       18:   93:                    printf("sorted array: ");
       18:   94:                    print_mass(a, size+1);
        -:   95:                }
        -:   96:
        -:   97:            }
        -:   98:            else
        -:   99:            {
        5:  100:                printf("File is empty!!!");
        -:  101:            }
        -:  102:        }
       26:  103:        fclose(f);
        -:  104:    }
       27:  105:    return 0;
        -:  106:}
