#include <stdio.h>
#include <stdlib.h>
#include <string.h>
//#include "functions.h"

#define OK 0
#define ALLOCERR 1
#define SORTERR 2



void print_mass(float a[], int size) // функция печати массива
{
    for (int i = 0; i < size; i++)
    {
        if ((a[i] - (int)a[i]) > 0)
            printf("%.3f ", a[i]);
        else if ((a[i] - (int)a[i]) == 0)
            printf("%d ", (int)a[i]);
    }
    printf("\n");
}

int array_count(FILE *f, float **data, int *n)
{
    int count = 0;
    float num;
    while (fscanf(f,"%f", &num) == 1)
        count += 1;
    *data = malloc(count * sizeof(float));
    if (*data)
    {
        *n = count;
        return OK;
    }
    else
    {
        return ALLOCERR;
    }
    return OK;
}

void array_create(float* data, FILE *f)
{
    float num = 0.0;
    float* array = data;
    while (fscanf(f, "%f", &num) == 1)
    {
        *array = num;
        array++;

    }
}

int filtr_count(FILE *f, float **data, int *n, float *sum)
{
    int count = 0;
    float num;
    *sum = 0.0;
    while (fscanf(f, "%f", &num) == 1)
        *sum += num;
    rewind(f);
    while (fscanf(f, "%f", &num) == 1)
    {
        *sum -= num;
        if (num > *sum)
            count += 1;
    }

    if (count)
    {
        *data = malloc(count * sizeof(float));
        if (*data)
        {
            *n = count;
            return OK;
        }
        else
            return ALLOCERR;
    }
    return OK;
}

void array_create_f(float* data, FILE *f, float sum)
{
    float num = 0.0;
    float* array = data;
    while (fscanf(f, "%f", &num) == 1)
    {
        sum -= num;
        if (num > sum)
        {
            *array = num;
            array++;
        }
    }
}

int sort(float* data, int n)
{
    int k, j;
    for (j = 0; j < n - 1; j++)
    {
        int f = 0;
        for (k = j + 1; k < n; k++)
        {
            if (*(data + j) > *(data + k ))
            {
                float temp = *(data + j);
                *(data + j) = *(data + k);
                *(data + k) = temp;
                f = 1;
            }
        }
        if (f == 0)
        {
            return OK;
        }

    }
    return OK;
}



int main(int argc, char **argv)
{
    float sum;
    float num;
    int filter_error;
    int array_error;
    int sort_error;
    float *array;
    int n;
    FILE *f;
    if (argc != 3) // проверка на наличие аргумента
        {
            fprintf(stderr, "Not enough arguments\n");
        }
        else
        {
            f = fopen(argv[2], "r"); // успешное открытие файла
            if (f == NULL)
            {
                fprintf(stderr, "Could not open file\n");
            }
            else
            {
                if (fscanf(f, "%f", &num) == 1) // проверка на пустой файл
                {
                    rewind(f);
                    if (strcmp(argv[1], "+") == 0)
                    {
                        filter_error = filtr_count(f, &array,&n, &sum);
                        fclose(f);
                        if (filter_error == OK)
                        {
                            f = fopen(argv[2], "r");
                            array_create_f(array, f, sum);
                            fclose(f);
                            sort_error = sort(array, n);
                            print_mass(array,n);
                            printf("%d", sort_error);

                        }
                        else if (filter_error == ALLOCERR)
                        {
                            printf("Memmory allocation error");
                        }
                    }
                    else if (strcmp(argv[1], "-") == 0)
                    {
                        array_error = array_count(f, &array,&n);
                        fclose(f);
                        if (array_error == OK)
                        {
                            f = fopen(argv[2], "r");
                            array_create(array, f);
                            fclose(f);
                            sort_error = sort(array, n);
                            print_mass(array,n);
                            printf("%d", sort_error);

                        }
                        else if (array_error == ALLOCERR)
                        {
                            printf("Memmory allocation error");
                        }
                    }


                }
                else
                {
                    printf("File is empty!!!");
                }
            }
            fclose(f);

        }
        return 0;
}





















int sort(void *pbase, size_t total, size_t size, int (*compare)(const void*, const void*))
{
    printf("!!!");

    for (float *base_ptr = pbase; *base_ptr < total; base_ptr += size)
    {
        int f = 0;
        for (float *tmp_ptr = base_ptr + size; *tmp_ptr < total; tmp_ptr += size)
        {
            if (compare((void*)base_ptr, (void*)tmp_ptr) < 0)
            {
                float t = *base_ptr;
                *base_ptr = *tmp_ptr;
                *tmp_ptr = t;
                f = 1;
            }

        }
        if (f == 0)
            return OK;
    }

    return OK;
}

